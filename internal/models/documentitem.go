// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DocumentItem is an object representing the database table.
type DocumentItem struct {
	DocumentItemId string      `boil:"documentitemid" json:"documentitemid" toml:"documentitemid" yaml:"documentitemid"`
	Title          null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	CreatedAt      null.Time   `boil:"createdat" json:"createdat,omitempty" toml:"createdat" yaml:"createdat,omitempty"`
	Content        null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Documentid     null.String `boil:"documentid" json:"documentid,omitempty" toml:"documentid" yaml:"documentid,omitempty"`

	R *documentItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L documentItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DocumentItemColumns = struct {
	DocumentItemId string
	Title          string
	CreatedAt      string
	Content        string
	Documentid     string
}{
	DocumentItemId: "documentitemid",
	Title:          "title",
	CreatedAt:      "createdat",
	Content:        "content",
	Documentid:     "documentid",
}

var DocumentItemTableColumns = struct {
	DocumentItemId string
	Title          string
	CreatedAt      string
	Content        string
	Documentid     string
}{
	DocumentItemId: "documentitem.documentitemid",
	Title:          "documentitem.title",
	CreatedAt:      "documentitem.createdat",
	Content:        "documentitem.content",
	Documentid:     "documentitem.documentid",
}

// Generated where

var DocumentItemWhere = struct {
	DocumentItemId whereHelperstring
	Title          whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	Content        whereHelpernull_String
	Documentid     whereHelpernull_String
}{
	DocumentItemId: whereHelperstring{field: "\"main\".\"documentitem\".\"documentitemid\""},
	Title:          whereHelpernull_String{field: "\"main\".\"documentitem\".\"title\""},
	CreatedAt:      whereHelpernull_Time{field: "\"main\".\"documentitem\".\"createdat\""},
	Content:        whereHelpernull_String{field: "\"main\".\"documentitem\".\"content\""},
	Documentid:     whereHelpernull_String{field: "\"main\".\"documentitem\".\"documentid\""},
}

// DocumentItemRels is where relationship names are stored.
var DocumentItemRels = struct {
	DocumentidDocument string
}{
	DocumentidDocument: "DocumentidDocument",
}

// documentItemR is where relationships are stored.
type documentItemR struct {
	DocumentidDocument *Document `boil:"DocumentidDocument" json:"DocumentidDocument" toml:"DocumentidDocument" yaml:"DocumentidDocument"`
}

// NewStruct creates a new relationship struct
func (*documentItemR) NewStruct() *documentItemR {
	return &documentItemR{}
}

func (r *documentItemR) GetDocumentidDocument() *Document {
	if r == nil {
		return nil
	}
	return r.DocumentidDocument
}

// documentItemL is where Load methods for each relationship are stored.
type documentItemL struct{}

var (
	documentItemAllColumns            = []string{"documentitemid", "title", "createdat", "content", "documentid"}
	documentItemColumnsWithoutDefault = []string{}
	documentItemColumnsWithDefault    = []string{"documentitemid", "title", "createdat", "content", "documentid"}
	documentItemPrimaryKeyColumns     = []string{"documentitemid"}
	documentItemGeneratedColumns      = []string{}
)

type (
	// DocumentItemSlice is an alias for a slice of pointers to DocumentItem.
	// This should almost always be used instead of []DocumentItem.
	DocumentItemSlice []*DocumentItem
	// DocumentItemHook is the signature for custom DocumentItem hook methods
	DocumentItemHook func(context.Context, boil.ContextExecutor, *DocumentItem) error

	documentItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	documentItemType                 = reflect.TypeOf(&DocumentItem{})
	documentItemMapping              = queries.MakeStructMapping(documentItemType)
	documentItemPrimaryKeyMapping, _ = queries.BindMapping(documentItemType, documentItemMapping, documentItemPrimaryKeyColumns)
	documentItemInsertCacheMut       sync.RWMutex
	documentItemInsertCache          = make(map[string]insertCache)
	documentItemUpdateCacheMut       sync.RWMutex
	documentItemUpdateCache          = make(map[string]updateCache)
	documentItemUpsertCacheMut       sync.RWMutex
	documentItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var documentItemAfterSelectHooks []DocumentItemHook

var documentItemBeforeInsertHooks []DocumentItemHook
var documentItemAfterInsertHooks []DocumentItemHook

var documentItemBeforeUpdateHooks []DocumentItemHook
var documentItemAfterUpdateHooks []DocumentItemHook

var documentItemBeforeDeleteHooks []DocumentItemHook
var documentItemAfterDeleteHooks []DocumentItemHook

var documentItemBeforeUpsertHooks []DocumentItemHook
var documentItemAfterUpsertHooks []DocumentItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DocumentItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DocumentItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DocumentItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DocumentItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DocumentItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DocumentItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DocumentItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DocumentItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DocumentItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocumentItemHook registers your hook function for all future operations.
func AddDocumentItemHook(hookPoint boil.HookPoint, documentItemHook DocumentItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		documentItemAfterSelectHooks = append(documentItemAfterSelectHooks, documentItemHook)
	case boil.BeforeInsertHook:
		documentItemBeforeInsertHooks = append(documentItemBeforeInsertHooks, documentItemHook)
	case boil.AfterInsertHook:
		documentItemAfterInsertHooks = append(documentItemAfterInsertHooks, documentItemHook)
	case boil.BeforeUpdateHook:
		documentItemBeforeUpdateHooks = append(documentItemBeforeUpdateHooks, documentItemHook)
	case boil.AfterUpdateHook:
		documentItemAfterUpdateHooks = append(documentItemAfterUpdateHooks, documentItemHook)
	case boil.BeforeDeleteHook:
		documentItemBeforeDeleteHooks = append(documentItemBeforeDeleteHooks, documentItemHook)
	case boil.AfterDeleteHook:
		documentItemAfterDeleteHooks = append(documentItemAfterDeleteHooks, documentItemHook)
	case boil.BeforeUpsertHook:
		documentItemBeforeUpsertHooks = append(documentItemBeforeUpsertHooks, documentItemHook)
	case boil.AfterUpsertHook:
		documentItemAfterUpsertHooks = append(documentItemAfterUpsertHooks, documentItemHook)
	}
}

// One returns a single documentItem record from the query.
func (q documentItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DocumentItem, error) {
	o := &DocumentItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for documentitem")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DocumentItem records from the query.
func (q documentItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DocumentItemSlice, error) {
	var o []*DocumentItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DocumentItem slice")
	}

	if len(documentItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DocumentItem records in the query.
func (q documentItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count documentitem rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q documentItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if documentitem exists")
	}

	return count > 0, nil
}

// DocumentidDocument pointed to by the foreign key.
func (o *DocumentItem) DocumentidDocument(mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"documentid\" = ?", o.Documentid),
	}

	queryMods = append(queryMods, mods...)

	return Documents(queryMods...)
}

// LoadDocumentidDocument allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentItemL) LoadDocumentidDocument(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDocumentItem interface{}, mods queries.Applicator) error {
	var slice []*DocumentItem
	var object *DocumentItem

	if singular {
		object = maybeDocumentItem.(*DocumentItem)
	} else {
		slice = *maybeDocumentItem.(*[]*DocumentItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentItemR{}
		}
		if !queries.IsNil(object.Documentid) {
			args = append(args, object.Documentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Documentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Documentid) {
				args = append(args, obj.Documentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`main.document`),
		qm.WhereIn(`main.document.documentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Document")
	}

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Document")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for document")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for document")
	}

	if len(documentItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocumentidDocument = foreign
		if foreign.R == nil {
			foreign.R = &documentR{}
		}
		foreign.R.DocumentidDocumentitems = append(foreign.R.DocumentidDocumentitems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Documentid, foreign.DocumentId) {
				local.R.DocumentidDocument = foreign
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.DocumentidDocumentitems = append(foreign.R.DocumentidDocumentitems, local)
				break
			}
		}
	}

	return nil
}

// SetDocumentidDocument of the documentItem to the related item.
// Sets o.R.DocumentidDocument to related.
// Adds o to related.R.DocumentidDocumentitems.
func (o *DocumentItem) SetDocumentidDocument(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Document) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"main\".\"documentitem\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"documentid"}),
		strmangle.WhereClause("\"", "\"", 2, documentItemPrimaryKeyColumns),
	)
	values := []interface{}{related.DocumentId, o.DocumentItemId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Documentid, related.DocumentId)
	if o.R == nil {
		o.R = &documentItemR{
			DocumentidDocument: related,
		}
	} else {
		o.R.DocumentidDocument = related
	}

	if related.R == nil {
		related.R = &documentR{
			DocumentidDocumentitems: DocumentItemSlice{o},
		}
	} else {
		related.R.DocumentidDocumentitems = append(related.R.DocumentidDocumentitems, o)
	}

	return nil
}

// RemoveDocumentidDocument relationship.
// Sets o.R.DocumentidDocument to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DocumentItem) RemoveDocumentidDocument(ctx context.Context, exec boil.ContextExecutor, related *Document) error {
	var err error

	queries.SetScanner(&o.Documentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("documentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DocumentidDocument = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DocumentidDocumentitems {
		if queries.Equal(o.Documentid, ri.Documentid) {
			continue
		}

		ln := len(related.R.DocumentidDocumentitems)
		if ln > 1 && i < ln-1 {
			related.R.DocumentidDocumentitems[i] = related.R.DocumentidDocumentitems[ln-1]
		}
		related.R.DocumentidDocumentitems = related.R.DocumentidDocumentitems[:ln-1]
		break
	}
	return nil
}

// DocumentItems retrieves all the records using an executor.
func DocumentItems(mods ...qm.QueryMod) documentItemQuery {
	mods = append(mods, qm.From("\"main\".\"documentitem\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"main\".\"documentitem\".*"})
	}

	return documentItemQuery{q}
}

// FindDocumentItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDocumentItem(ctx context.Context, exec boil.ContextExecutor, documentItemId string, selectCols ...string) (*DocumentItem, error) {
	documentItemObj := &DocumentItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"main\".\"documentitem\" where \"documentitemid\"=$1", sel,
	)

	q := queries.Raw(query, documentItemId)

	err := q.Bind(ctx, exec, documentItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from documentitem")
	}

	if err = documentItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return documentItemObj, err
	}

	return documentItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DocumentItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no documentitem provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	documentItemInsertCacheMut.RLock()
	cache, cached := documentItemInsertCache[key]
	documentItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			documentItemAllColumns,
			documentItemColumnsWithDefault,
			documentItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(documentItemType, documentItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(documentItemType, documentItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"main\".\"documentitem\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"main\".\"documentitem\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into documentitem")
	}

	if !cached {
		documentItemInsertCacheMut.Lock()
		documentItemInsertCache[key] = cache
		documentItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DocumentItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DocumentItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	documentItemUpdateCacheMut.RLock()
	cache, cached := documentItemUpdateCache[key]
	documentItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			documentItemAllColumns,
			documentItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update documentitem, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"main\".\"documentitem\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, documentItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(documentItemType, documentItemMapping, append(wl, documentItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update documentitem row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for documentitem")
	}

	if !cached {
		documentItemUpdateCacheMut.Lock()
		documentItemUpdateCache[key] = cache
		documentItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q documentItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for documentitem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for documentitem")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocumentItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"main\".\"documentitem\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, documentItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in documentItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all documentItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DocumentItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no documentitem provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	documentItemUpsertCacheMut.RLock()
	cache, cached := documentItemUpsertCache[key]
	documentItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			documentItemAllColumns,
			documentItemColumnsWithDefault,
			documentItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			documentItemAllColumns,
			documentItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert documentitem, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(documentItemPrimaryKeyColumns))
			copy(conflict, documentItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"main\".\"documentitem\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(documentItemType, documentItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(documentItemType, documentItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert documentitem")
	}

	if !cached {
		documentItemUpsertCacheMut.Lock()
		documentItemUpsertCache[key] = cache
		documentItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DocumentItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DocumentItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DocumentItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), documentItemPrimaryKeyMapping)
	sql := "DELETE FROM \"main\".\"documentitem\" WHERE \"documentitemid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from documentitem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for documentitem")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q documentItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no documentItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from documentitem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for documentitem")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocumentItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(documentItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"main\".\"documentitem\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, documentItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from documentItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for documentitem")
	}

	if len(documentItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DocumentItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDocumentItem(ctx, exec, o.DocumentItemId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DocumentItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"main\".\"documentitem\".* FROM \"main\".\"documentitem\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, documentItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DocumentItemSlice")
	}

	*o = slice

	return nil
}

// DocumentItemExists checks if the DocumentItem row exists.
func DocumentItemExists(ctx context.Context, exec boil.ContextExecutor, documentItemId string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"main\".\"documentitem\" where \"documentitemid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, documentItemId)
	}
	row := exec.QueryRowContext(ctx, sql, documentItemId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if documentitem exists")
	}

	return exists, nil
}
